#!/usr/bin/env groovy
library 'kibana-pipeline-library'
def loadPipeline

pipeline {
    agent { label 'docker && ubuntu-tests-l' }
    parameters {
        string(name: 'NUMBER_TEST_RUNS', defaultValue: '1', description: 'Number of parallel executions')
    }
    stages {
        stage ('Initialize') {
            steps {
                echo "PATH = ${PATH}"
                echo "STACK_VERSION = ${params.STACK_VERSION}"
                echo "INGEST_RESULTS = ${params.INGEST_RESULTS}"
                echo "DEPLOY_CONFIG = ${params.DEPLOY_CONFIG}"
                echo "SIMULATION = ${params.SIMULATION}"
                script {
                    loadPipeline = load "${env.WORKSPACE}/kibana-load-testing/.ci/loadPipeline.groovy"
                    env.NUMBER_TEST_RUNS = params.NUMBER_TEST_RUNS.toInteger()
                    if (env.NUMBER_TEST_RUNS > 30) {
                        env.NUMBER_TEST_RUNS = 30
                    }
                }
                echo "NUMBER_TEST_RUNS = ${env.NUMBER_TEST_RUNS}"
            }
        }
        stage ('Run tests on cloud') {
            steps {
                withVaultSecret(secret: 'secret/kibana-issues/dev/cloud-staging-api-key', secret_field: 'value', variable_name: 'API_KEY') {
                    script {
                        for (def i = 1; i <= env.NUMBER_TEST_RUNS; i++) {
                            docker.image('maven:3.6.3-openjdk-8-slim').withRun('-v ${HOME}/.m2:/root/.m2') {
                                sh """./kibana-load-testing/scripts/deploy_and_test.sh -v '${params.STACK_VERSION}' -c '${params.DEPLOY_CONFIG}' -s '${params.SIMULATION}'"""
                                loadPipeline.uploadGatlingReport()
                            }
                        }
                    }
                }
            }
            post {
                success {
                    script {
                        if (params.INGEST_RESULTS.toBoolean()) {
                            withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'host', variable_name: 'HOST_FROM_VAULT') {
                                withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'username', variable_name: 'USER_FROM_VAULT') {
                                    withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'password', variable_name: 'PASS_FROM_VAULT') {
                                        sh '''./kibana-load-testing/scripts/ingest_results.sh'''
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}