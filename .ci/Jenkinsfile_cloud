#!/usr/bin/env groovy
library 'kibana-pipeline-library'

pipeline {
    agent { label 'docker && ubuntu-tests-l' }
    stages {
        stage ('Initialize') {
            steps {
                echo "PATH = ${PATH}"
                echo "STACK_VERSION = ${params.STACK_VERSION}"
                echo "INGEST_RESULTS = ${params.INGEST_RESULTS}"
                echo "DEPLOY_CONFIG = ${params.DEPLOY_CONFIG}"
                echo "SIMULATION = ${params.SIMULATION}"
            }
        }
        stage ('Run tests on cloud') {
            steps {
                withVaultSecret(secret: 'secret/kibana-issues/dev/cloud-staging-api-key', secret_field: 'value', variable_name: 'API_KEY') {
                    sh """./kibana-load-testing/scripts/deploy_and_test.sh -v '${params.STACK_VERSION}' -c '${params.DEPLOY_CONFIG}' -s '${params.SIMULATION}'"""
                }
            }
            post {
                success {
                  script {
                      if (params.INGEST_RESULTS.toBoolean()) {
                          withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'host', variable_name: 'HOST_FROM_VAULT') {
                              withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'username', variable_name: 'USER_FROM_VAULT') {
                                  withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'password', variable_name: 'PASS_FROM_VAULT') {
                                      sh '''./kibana-load-testing/scripts/ingest_results.sh'''
                                  }
                              }
                          }
                      }
                  }
                }
            }
        }
    }
}