#!/usr/bin/env groovy
library 'kibana-pipeline-library'
def loadPipeline
def MAVEN_IMAGE =  'maven:3.6.3-openjdk-8-slim'
def MAX_TEST_RUNS = 10

pipeline {
    agent { label 'docker && ubuntu-tests-l' }
    options {
        timeout(time: 120, unit: 'MINUTES')
    }
    parameters {
        string(name: 'STACK_VERSION', defaultValue: '7.x,8.0.0-SNAPSHOT', description: 'Stack version on Cloud')
        string(name: 'SIMULATION', defaultValue: 'CanvasJourney,DiscoverJourney,DashboardJourney,AtOnceJourney,DiscoverAtOnce,TSVBGaugeJourney,TSVBTimeSeriesJourney,LensJourney,DemoJourney', description: 'Comma-separated simulation list')
        string(name: 'NUMBER_TEST_RUNS', defaultValue: '1', description: 'Running the same scenario up to 10 times')
        string(name: 'DEPLOY_SECRET', defaultValue: 'cloud-staging-api-key', description: 'Set Vault key for Cloud deployment')
    }
    stages {
        stage ('Initialize') {
            steps {
                echo "PATH = ${PATH}"
                echo "STACK_VERSION = ${params.STACK_VERSION}"
                echo "INGEST_RESULTS = ${params.INGEST_RESULTS}"
                echo "DEPLOY_CONFIG = ${params.DEPLOY_CONFIG}"
                echo "SIMULATION = ${params.SIMULATION}"
                echo "NUMBER_TEST_RUNS = ${params.NUMBER_TEST_RUNS}"
                script {
                    loadPipeline = load "${env.WORKSPACE}/kibana-load-testing/.ci/loadPipeline.groovy"
                    env.NUMBER_TEST_RUNS = Integer.valueOf(params.NUMBER_TEST_RUNS) > MAX_TEST_RUNS ?  MAX_TEST_RUNS.toString() : params.NUMBER_TEST_RUNS
                }
            }
        }
        stage ('Run tests on cloud') {
            steps {
                echo "All load scenarios will be executed ${env.NUMBER_TEST_RUNS} times"
                script {
                    docker.image(MAVEN_IMAGE).inside('-u root') {
                        withVaultSecret(secret: "secret/kibana-issues/dev/${params.DEPLOY_SECRET}", secret_field: 'value', variable_name: 'API_KEY') {
                            sh """./kibana-load-testing/scripts/deploy_and_test.sh \
                                -v '${params.STACK_VERSION}' \
                                -c '${params.DEPLOY_CONFIG}' \
                                -s '${params.SIMULATION}' \
                                -n '${env.NUMBER_TEST_RUNS}'
                               """
                            sh """ ./kibana-load-testing/scripts/archive_results.sh """
                        }
                        loadPipeline.uploadGatlingReport()
                        if (params.INGEST_RESULTS.toBoolean()) {
                            withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'host', variable_name: 'HOST_FROM_VAULT') {
                                withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'username', variable_name: 'USER_FROM_VAULT') {
                                    withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'password', variable_name: 'PASS_FROM_VAULT') {
                                        sh '''./kibana-load-testing/scripts/ingest_results.sh'''
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}