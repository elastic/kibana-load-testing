#!/usr/bin/env groovy
library 'kibana-pipeline-library'
def loadPipeline

pipeline {
    agent { label 'docker && ubuntu-tests-l' }
    parameters {
        string(name: 'SIMULATION', defaultValue: 'local.AtOnceJourney,local.DiscoverAtOnce,DemoJourney', description: 'Comma-separated simulation list')
    }
    stages {
        stage ('Initialize') {
            steps {
                echo "PATH = ${PATH}"
                echo "STACK_VERSION = ${params.STACK_VERSION}"
                echo "INGEST_RESULTS = ${params.INGEST_RESULTS}"
                echo "DEPLOY_CONFIG = ${params.DEPLOY_CONFIG}"
                echo "SIMULATION = ${params.SIMULATION}"
                script {
                    loadPipeline = load "${env.WORKSPACE}/kibana-load-testing/.ci/loadPipeline.groovy"
                }
            }
        }
        stage ('Run tests on cloud') {
            steps {
                script {
                    withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'host', variable_name: 'HOST_FROM_VAULT') {
                        withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'username', variable_name: 'USER_FROM_VAULT') {
                            withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'password', variable_name: 'PASS_FROM_VAULT') {
                                script {
                                    docker.image('maven:3.5.4-jdk-11').inside {
                                        sh """
                                ./kibana-load-testing/scripts/deploy_and_test.sh -v '${params.STACK_VERSION}' -c '${params.DEPLOY_CONFIG}' -s '${params.SIMULATION}'
                                """
                                    }
                                }
                            }
                        }
                    }
                }
            }
            post {
                success {
                    script {
                        if (params.INGEST_RESULTS.toBoolean()) {
                            withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'host', variable_name: 'HOST_FROM_VAULT') {
                                withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'username', variable_name: 'USER_FROM_VAULT') {
                                    withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'password', variable_name: 'PASS_FROM_VAULT') {
                                        sh '''./kibana-load-testing/scripts/ingest_results.sh'''
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
