#!/usr/bin/env groovy
library 'kibana-pipeline-library'
def loadPipeline

pipeline {
    agent { label 'benchmarks' }
    parameters {
        string(name: 'SIMULATION', defaultValue: 'CanvasJourney,DiscoverJourney,LensJourney', description: 'Comma-separated simulation list')
        string(name: 'GITHUB_KIBANA_BRANCH', defaultValue: 'main', description: 'The Git branch specifier to build (branch, tag, commit hash, etc)')
    }
    options {
        timeout(time: 180, unit: 'MINUTES')
    }
    stages {
        stage ('Initialize') {
            steps {
                echo "PATH = ${PATH}"
                echo "GITHUB_KIBANA_REPO_OWNER = ${params.GITHUB_KIBANA_REPO_OWNER}"
                echo "GITHUB_KIBANA_REPO = ${params.GITHUB_KIBANA_REPO}"
                echo "GITHUB_KIBANA_BRANCH = ${params.GITHUB_KIBANA_BRANCH}"
                echo "SIMULATION = ${params.SIMULATION}"
                echo "INGEST_RESULTS = ${params.INGEST_RESULTS}"
                script {
                    loadPipeline = load "${env.WORKSPACE}/kibana-load-testing/.ci/loadPipeline.groovy"
                }
            }
        }
        stage ('Running tests against locally build Kibana instance') {
            steps {
                script {
                    //restore default behaviour
                    env.CI = ""
                    env.KIBANA_REPO_NAME = "${params.GITHUB_KIBANA_REPO_OWNER}/${params.GITHUB_KIBANA_REPO}"
                    env.KIBANA_BRANCH = "${params.GITHUB_KIBANA_BRANCH}"
                    echo "Using repo: git@github.com:${env.KIBANA_REPO_NAME}"
                    echo "Using branch: ${env.KIBANA_BRANCH}"
                }
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${env.KIBANA_BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'kibana']],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        credentialsId: 'f6c7695a-671e-4f4f-a331-acdce44ff9ba',
                        url: "git@github.com:${env.KIBANA_REPO_NAME}",
                    ]],
                ])
                script {
                    withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'host', variable_name: 'HOST_FROM_VAULT') {
                        withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'username', variable_name: 'USER_FROM_VAULT') {
                            withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'password', variable_name: 'PASS_FROM_VAULT') {
                                sh """
                                export HOME=${env.WORKSPACE}
                                export KIBANA_BRANCH=${env.KIBANA_BRANCH}
                                ./kibana-load-testing/scripts/build_and_test.sh -s '${params.SIMULATION}'
                                """
                            }
                        }
                    }
                }
            }
            post {
                success {
                    script {
                        withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'host', variable_name: 'HOST_FROM_VAULT') {
                            withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'username', variable_name: 'USER_FROM_VAULT') {
                                withVaultSecret(secret: 'secret/kibana-issues/prod/coverage/elasticsearch', secret_field: 'password', variable_name: 'PASS_FROM_VAULT') {
                                    sh """
                                        export HOME=${env.WORKSPACE}   
                                        ./kibana-load-testing/scripts/archive_results.sh                            
                                    """
                                    loadPipeline.uploadGatlingReport()
                                    if (params.INGEST_RESULTS.toBoolean()) {
                                        sh '''./kibana-load-testing/scripts/ingest_results.sh'''
                                    }
                                }
                            }
                        }
                    }
                }
                always {
                    deleteDir()
                }
            }
        }
    }
}
